* Configuration
  
** Personal Information  
   
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Gregor Riegler"
      message-signature nil
      user-mail-address "gregor.riegler@gmail.com")
#+END_SRC

** linum
#+BEGIN_SRC emacs-lisp
(require 'linum)

(global-linum-mode)

(defcustom linum-disabled-modes-list '(twittering-mode eshell-mode erc-mode wl-summary-mode compilation-mode org-mode text-mode dired-mode doc-view-mode)
  "* List of modes disabled when global linum mode is on"
  :type '(repeat (sexp :tag "Major mode"))
  :tag " Major modes where linum is disabled: "
  :group 'linum
  )
(defcustom linum-disable-starred-buffers 't
  "* Disable buffers that have stars in them like *Gnu Emacs*"
  :type 'boolean
  :group 'linum)

(defun linum-on ()
  "* When linum is running globally, disable line number in modes defined in `linum-disabled-modes-list'. Changed by linum-off. Also turns off numbering in starred modes like *scratch*"

  (unless (or (minibufferp) (member major-mode linum-disabled-modes-list)
              (and linum-disable-starred-buffers (string-match "*" (buffer-name)))
              )
    (linum-mode 1)))

(provide 'setup-linum)

#+END_SRC

** Twitter
#+BEGIN_SRC emacs-lisp
(setq  twittering-icon-mode t)
(setq twittering-timer-interval 300)         ; Update your timeline each 300 seconds (5 minutes)
(setq twittering-url-show-status nil)        ; Keeps the echo area from showing all the http processes
(setq twittering-use-master-password t)
#+END_SRC
** Shell
#+BEGIN_SRC emacs-lisp
(global-set-key [f1] 'shell)
#+END_SRC
** Util
#+BEGIN_SRC emacs-lisp
(defun string/starts-with (s begins)
  "Return non-nil if string S starts with BEGINS."
  (cond ((>= (length s) (length begins))
         (string-equal (substring s 0 (length begins)) begins))
        (t nil)))

#+END_SRC
** Encryption
   #+BEGIN_SRC emacs-lisp
   (require 'epa-file)
   (epa-file-enable)
   #+END_SRC
** winner
#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC
** eldoc
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
#+END_SRC
** Ido
#+begin_src emacs-lisp 
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.

(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
(setq gc-cons-threshold 20000000)
#+end_src
** js2-setup
#+BEGIN_SRC emacs-lisp
(require 'js-comint)
(setq inferior-js-program-command (concat user-emacs-directory "nodei.sh"))
;; (add-hook 'js2-mode-hook '(lambda () 
;;           (local-set-key "\C-x\C-e" 'js-send-last-sexp)
;;           (local-set-key "\C-\M-x" 'js-send-last-sexp-and-go)
;;           (local-set-key "\C-cb" 'js-send-buffer)
;;           (local-set-key "\C-c\C-b" 'js-send-buffer-and-go)
;;           (local-set-key "\C-cl" 'js-load-file-and-go)
;;           ))
(eval-after-load "js2-mode"
  '(progn  (define-key js2-mode-map (kbd "C-x C-e") 'js-send-last-sexp) ;
(define-key js2-mode-map (kbd "C-M-x") 'js-send-last-sexp-and-go)
(define-key js2-mode-map (kbd "C-c C-k") 'js-send-buffer)
(define-key js2-mode-map (kbd "C-c C-l") 'js-send-buffer-and-go)
(define-key js2-mode-map (kbd "C-c l") 'js-load-file-and-go)

(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))))
#+END_SRC
** manage js-mode
#+BEGIN_SRC emacs-lisp
;; (add-hook 'skewer-mode 'js2-minor-mode)
(defun choose-js-mode () (interactive) (if (y-or-n-p "Frontend (y) or backend (n)")
    (skewer-mode 1)
    (skewer-mode 0)))
(add-hook 'js2-mode 'choose-js-mode)

  (add-hook 'css-mode-hook 'skewer-css-mode)
  (add-hook 'html-mode-hook 'skewer-html-mode)
#+END_SRC

** Ansi-color
#+BEGIN_SRC emacs-lisp
(autoload 'ansi-color-for-comint-mode-on "ansi-color" nil t)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
(add-hook 'eshell-preoutput-filter-functions
           'ansi-color-filter-apply)

#+END_SRC
** Load-Path
   #+begin_src emacs-lisp 
     (add-to-list 'load-path (concat user-emacs-directory "custom"))
     (add-to-list 'load-path (concat user-emacs-directory "custom/use-package"))
   #+end_src
** Kill process
#+begin_src emacs-lisp 
  (define-key process-menu-mode-map (kbd "C-k") 'joaot/delete-process-at-point)
  
  (defun joaot/delete-process-at-point ()
    (interactive)
    (let ((process (get-text-property (point) 'tabulated-list-id)))
      (cond ((and process
                  (processp process))
             (delete-process process)
             (revert-buffer))
            (t
             (error "no process at point!")))))
#+end_src
** Dired
#+begin_src emacs-lisp 
(require 'dired-details+)
;; (toggle-diredp-find-file-reuse-dir 1)

(defun my-dired-init ()
  "Bunch of stuff to run for dired, either immediately or when it's
        loaded."
  ;; <add other stuff here>
  (define-key dired-mode-map [return] 'dired-single-buffer)
  (define-key dired-mode-map [mouse-1] 'dired-single-buffer-mouse)
  (define-key dired-mode-map (kbd "/") 'dired-isearch-filenames)
  (define-key dired-mode-map "^"
    (function
     (lambda nil (interactive) (dired-single-buffer "..")))))

;; if dired's already loaded, then the keymap will be bound
(if (boundp 'dired-mode-map)
    ;; we're good to go; just add our bindings
    (my-dired-init)
  ;; it's not loaded yet, so add our bindings to the load-hook
  (add-hook 'dired-load-hook 'my-dired-init))

(global-set-key [(f5)] 'dired-single-magic-buffer)
(global-set-key [(control f5)] (function
                                (lambda nil (interactive)
                                  (dired-single-magic-buffer default-directory))))
(global-set-key [(shift f5)] (function
                              (lambda nil (interactive)
                                (message "Current directory is: %s" default-directory))))
(global-set-key [(meta f5)] 'dired-single-toggle-buffer-name)


(eval-after-load "dired-aux" '(add-to-list 'dired-compress-file-suffixes '("\\.zip\\'" ".zip" "unzip")))
#+end_src

** mu4e
   #+BEGIN_SRC emacs-lisp
            ;; taken and adapted from http://www.brool.com/index.php/using-mu4e


            (defun email () 
              (interactive)
              (when (not (featurep 'mu4e))
                (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e/")

                (require 'mu4e)
                (require 'org-mu4e)

                (define-key mu4e-main-mode-map (kbd "<SPC>") 'ido-switch-buffer)
                (define-key mu4e-headers-mode-map (kbd "q") 'ido-switch-buffer)


                (setq mu4e-update-mail-and-index t)
                ;; defaults

                (setq mu4e-maildir "~/Maildir")
                (setq mu4e-drafts-folder "/[Gmail].Entw&APw-rfe")
                (setq mu4e-sent-folder   "/[Gmail].Gesendet")
                (setq mu4e-trash-folder  "/[Gmail].Papierkorb")

                ;; don't save message to Sent Messages, Gmail/IMAP takes care of this
                (setq mu4e-update-interval 300 mu4e-sent-messages-behavior 'delete)

                ;; setup some handy shortcuts
                ;; you can quickly switch to your Inbox -- press ``ji''
                ;; then, when you want archive some messages, move them to
                ;; the 'All Mail' folder by pressing ``ma''.

                (setq mu4e-attachment-dir  "~/Downloads")

                (setq mu4e-maildir-shortcuts
                      '( ("/INBOX"               . ?i)
                         ("/[Gmail].Wichtig"   . ?!)
                         ("/[Gmail].Markiert"   . ?m)
                         ("/[Gmail].Papierkorb"   . ?p)
                         ("/[Gmail].Spam"   . ?s)
                         ("/[Gmail].Alle Nachrichten"    . ?a)))

                (setq mu4e-bookmarks '(
             ("maildir:\"/INBOX\" date:7d..now AND NOT maildir:\"/[Gmail].Spam\"" "INBOX without Spam last 7" ?i)
             ("maildir:\"/INBOX\" AND NOT maildir:\"/[Gmail].Spam\"" "INBOX without Spam" ?j)
             ;; ("flag:unread AND NOT flag:trashed" "Unread messages" 117)
             ;; ("date:today..now" "Today's messages" 116)
             ;; ("date:7d..now" "Last 7 days" 119)
            ))

                ;; allow for updating mail using 'U' in the main view:
                ;; I have this running in the background anyway
                (setq mu4e-get-mail-command "offlineimap")

                ;; sending mail -- replace USERNAME with your gmail username
                ;; also, make sure the gnutls command line utils are installed
                ;; package 'gnutls-bin' in Debian/Ubuntu

                (require 'smtpmail)

                 ;; alternatively, for emacs-24 you can use:
                 (setq message-send-mail-function 'smtpmail-send-it
                       smtpmail-stream-type 'starttls
                       smtpmail-default-smtp-server "smtp.gmail.com"
                       smtpmail-smtp-server "smtp.gmail.com"
                       smtpmail-smtp-service 587)


                 ;; don't include message signature
                 (setq mu4e-compose-signature-auto-include nil)

                 ;; set date format (does not overwrite the settings for some reaso)
                 ;; (setq mu4e-headers-date-format "%d.%m.%y")

                ;; don't keep message buffers around
                (setq message-kill-buffer-on-exit t)

                ;; show images
                (setq mu4e-show-images t)

                ;; use imagemagick, if available
                (when (fboundp 'imagemagick-register-types)
                  (imagemagick-register-types))

                ;;; message view action
                (defun mu4e-msgv-action-view-in-browser (msg)
                  "View the body of the message in a web browser."
                  (interactive)
                  (let ((html (mu4e-msg-field (mu4e-message-at-point t) :body-html))
                        (tmpfile (format "%s/%d.html" temporary-file-directory (random))))
                    (unless html (error "No html part for this message"))
                    (with-temp-file tmpfile
                      (insert
                       "<html>"
                       "<head><meta http-equiv=\"content-type\""
                       "content=\"text/html;charset=UTF-8\">"
                       html))
                    (browse-url (concat "file://" tmpfile))))

                (add-to-list 'mu4e-view-actions
                             '("View in browser" . mu4e-msgv-action-view-in-browser) t)


                ;; convert org mode to HTML automatically
                (setq org-mu4e-convert-to-html t)

                ;; need this to convert some e-mails properly
                ;; (setq mu4e-html2text-command "html2text -utf8 -style pretty -width 72")
   (setq mu4e-html2text-command "html2markdown | grep -v '&nbsp_place_holder;'")
                ;; (setq mu4e-html2text-command "w3m -cols 72 -dump -T text/html")
            )
              (mu4e)
         )

            (defalias 'org-mail 'org-mu4e-compose-org-mode)
      (email)
   (add-hook 'mu4e-compose-mode-hook
      (defun my-setup-epa-hook ()
        (epa-mail-mode)))
   (add-hook 'mu4e-view-mode-hook
     (defun my-view-mode-hook ()
      (epa-mail-mode)))

   (require 'smtpmail)

   (setq message-send-mail-function 'smtpmail-send-it
         starttls-use-gnutls t
         smtpmail-starttls-credentials
         '(("smtp.gmail.com" 587 nil nil))
         smtpmail-auth-credentials
         (expand-file-name "~/.authinfo.gpg")
         smtpmail-default-smtp-server "smtp.gmail.com"
         smtpmail-smtp-server "smtp.gmail.com"
         smtpmail-smtp-service 587
         smtpmail-debug-info t)

   #+END_SRC

** w3m

*** Load-Path
   #+begin_src emacs-lisp 
      ;; (add-to-list 'load-path (concat user-emacs-directory "custom/emacs-w3m"))
      ;; (autoload 'w3m "w3m" "Interface for w3m on Emacs." t)
      ;; (require 'w3m-load)
      (setq browse-url-browser-function 'browse-url-default-browser)

      ;; (setq w3m-mode-map (make-sparse-keymap))

      ;; (define-key w3m-mode-map (kbd "RET") 'w3m-view-this-url)
      ;; (define-key w3m-mode-map (kbd "q") 'bury-buffer)
      ;; (define-key w3m-mode-map (kbd "<mouse-1>") 'w3m-maybe-url)
      ;; (define-key w3m-mode-map [f5] 'w3m-reload-this-page)
      ;; (define-key w3m-mode-map (kbd "C-c C-d") 'haskell-w3m-open-haddock)
      ;; (define-key w3m-mode-map (kbd "M-<left>") 'w3m-view-previous-page)
      ;; (define-key w3m-mode-map (kbd "M-<right>") 'w3m-view-next-page)
      ;; (define-key w3m-mode-map (kbd "M-.") 'w3m-haddock-find-tag)

      ;; (defun w3m-maybe-url ()
      ;;   (interactive)
      ;;   (if (or (equal '(w3m-anchor) (get-text-property (point) 'face))
      ;;           (equal '(w3m-arrived-anchor) (get-text-property (point) 'face)))
      ;;       (w3m-view-this-url)))


   ;;change default browser for 'browse-url'  to w3m
   ;; (setq browse-url-browser-function 'w3m-goto-url-new-session)

   ;; ;;change w3m user-agent to android
   ;; (setq w3m-user-agent "Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC_Pyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.")

   ;; ;;quick access hacker news
   ;; (defun hn ()
   ;;   (interactive)
   ;;   (browse-url "http://news.ycombinator.com"))

   ;; ;;quick access reddit
   ;; (defun reddit (reddit)
   ;;   "Opens the REDDIT in w3m-new-session"
   ;;   (interactive (list
   ;;                 (read-string "Enter the reddit (default: psycology): " nil nil "psychology" nil)))
   ;;   (browse-url (format "http://m.reddit.com/r/%s" reddit))
   ;;   )

   ;; ;;i need this often
   ;; (defun wikipedia-search (search-term)
   ;;   "Search for SEARCH-TERM on wikipedia"
   ;;   (interactive
   ;;    (let ((term (if mark-active
   ;;                    (buffer-substring (region-beginning) (region-end))
   ;;                  (word-at-point))))
   ;;      (list
   ;;       (read-string
   ;;        (format "Wikipedia (%s):" term) nil nil term)))
   ;;    )
   ;;   (browse-url
   ;;    (concat
   ;;     "http://en.m.wikipedia.org/w/index.php?search="
   ;;     search-term
   ;;     ))
   ;;   )

   ;; ;;when I want to enter the web address all by hand
   ;; (defun w3m-open-site (site)
   ;;   "Opens site in new w3m session with 'http://' appended"
   ;;   (interactive
   ;;    (list (read-string "Enter website address(default: w3m-home):" nil nil w3m-home-page nil )))
   ;;   (w3m-goto-url-new-session
   ;;    (concat "http://" site)))

   #+END_SRC

** Sauron

#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path (concat user-emacs-directory "custom/sauron"))
(require 'sauron)
(global-set-key (kbd "C-c s") 'sauron-toggle-hide-show)
(setq sauron-dbus-cookie t)
;; (sr-dbus-drop-cookie)
(setq sauron-max-line-length nil)
(setq sauron-hide-mode-line t)
(setq sauron-separate-frame nil)
(sauron-start-hidden)
(setq sauron-watch-nicks '("hvr" "edwardk"))
(setq sauron-watch-patterns '("lens" "parsec"))
(add-hook 'sauron-event-added-functions
  (lambda (origin prio msg &optional props)
    (if (string/starts-with msg "Mail")
        (progn (shell-command (concat "notify-send -i " "/usr/share/icons/gnome/48x48/emblems/emblem-mail.png '" (replace-regexp-in-string "\\([^|]* | \\)" "Mail von " msg nil nil 1) "'"))
               (sauron-fx-sox "/usr/share/sounds/ubuntu/stereo/message.ogg")))))
#+END_SRC
** Drag-Stuff
#+BEGIN_SRC emacs-lisp
(require 'drag-stuff)
;; (drag-stuff-mode t)
#+END_SRC
** Erc
#+BEGIN_SRC emacs-lisp
(require 'erc)
(load-file (concat user-emacs-directory "custom/erc-scrolltobottom-patch.el"))
(setq erc-autojoin-channels-alist '(("freenode.net" "#haskell" "#org-mode")))
(setq erc-hide-list '("JOIN" "PART" "QUIT" "NICK"))
(setq erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE" "324" "329" "332" "333" "353" "477"))
(setq erc-auto-discard-away t)
(setq erc-modules (quote (autoaway autojoin button completion fill irccontrols list match menu move-to-prompt netsplit networks noncommands notifications readonly ring scrolltobottom stamp track)))
(setq erc-fill-static-center 15)
(setq erc-fill-function 'erc-fill-static)
(add-hook 'window-configuration-change-hook 
     '(lambda ()
        (setq erc-fill-column (- (window-width) 2))))
 (setq erc-timestamp-format "[%H:%M] ")
 (setq erc-fill-prefix "      + ")
(add-to-list 'erc-mode-hook (lambda ()
                              (set (make-local-variable 'scroll-conservatively) 100)))
(setq erc-prompt-for-password nil)
(setq erc-interpret-mirc-color t)

(add-hook 'erc-mode-hook '(lambda () (setq line-spacing 10)))

(defun start-erc () 
       (interactive)
       (erc :server "irc.freenode.net" :port 6667 :nick "sleepomeno"))
#+END_SRC
** Use-package
   #+begin_src emacs-lisp 
     (require 'use-package)
     (require 'bind-key)
   #+end_src
** ediff
#+BEGIN_SRC emacs-lisp
(defun ora-ediff-hook ()
  (ediff-setup-keymap)
  (define-key ediff-mode-map "j" 'ediff-next-difference)
  (define-key ediff-mode-map "k" 'ediff-previous-difference))

(add-hook 'ediff-mode-hook 'ora-ediff-hook)

(winner-mode)
(add-hook 'ediff-after-quit-hook-internal 'winner-undo)

#+END_SRC

** General
#+BEGIN_SRC emacs-lisp
;; General
(setq initial-scratch-message nil)                                         ; *scratch* starts empty

(projectile-global-mode)                                                   ; Quickly navigate projects using Projectile (C-c p C-h for available commands)
(setq projectile-show-paths-function 'projectile-hashify-with-relative-paths) ; Projectile shows full relative paths

;; Visual
(load-theme 'twilight t)                                                   ; Load my preferred theme, twilight
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)                        ; Enable rainbow delimiters when programming
(remove-hook 'prog-mode-hook 'esk-turn-on-hl-line-mode)                    ; Disable emacs-starter-kits line highlighting

(global-linum-mode t)                                                      ; Always show line numbers on left
(setq linum-format "%4d ")                                                 ; Line numbers gutter should be four characters wide

(line-number-mode 1)                                                       ; Mode line shows line numbers
(column-number-mode 1)                                                     ; Mode line shows column numbers

(setq-default tab-width 2)                                                 ; Tab width of 2

(setq visible-bell nil)                                                    ; No more Mr. Visual Bell Guy.

;; Ido-mode customizations
(setq ido-decorations                                                      ; Make ido-mode display vertically
      (quote
       ("\n-> "           ; Opening bracket around prospect list
        ""                ; Closing bracket around prospect list
        "\n   "           ; separator between prospects
        "\n   ..."        ; appears at end of truncated list of prospects
        "["               ; opening bracket around common match string
        "]"               ; closing bracket around common match string
        " [No match]"     ; displayed when there is no match
        " [Matched]"      ; displayed if there is a single match
        " [Not readable]" ; current diretory is not readable
        " [Too big]"      ; directory too big
        " [Confirm]")))   ; confirm creation of new file or buffer

(add-hook 'ido-setup-hook                                                  ; Navigate ido-mode vertically
          (lambda ()
            (define-key ido-completion-map [down] 'ido-next-match)
            (define-key ido-completion-map [up] 'ido-prev-match)
            (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
            (define-key ido-completion-map (kbd "C-p") 'ido-prev-match)))

;; (global-set-key (kbd "C-M-x") 'eval-defun) ;; does not work, enters debugger



#+END_SRC
*** Theme
#+begin_src emacs-lisp 
;; (add-to-list 'custom-theme-load-path (concat user-emacs-directory "custom/cyberbunk"))

;; (add-hook 'after-init-hook (lambda () (load-theme 'cyberpunk t)))
#+end_src
** Clojure
*** Load the provided Clojure start kit configurations
    #+begin_src emacs-lisp 
;; Clojure
(setq auto-mode-alist (cons '("\\.edn$" . clojure-mode) auto-mode-alist))  ; *.edn are Clojure files
(setq auto-mode-alist (cons '("\\.cljs$" . clojure-mode) auto-mode-alist)) ; *.cljs are Clojure files


;; nREPL customizations
(setq nrepl-popup-stacktraces nil)                                         ; Don't aggresively popup stacktraces
(setq nrepl-popup-stacktraces-in-repl t)                                   ; Display stacktrace inline

(add-hook 'nrepl-interaction-mode-hook 'nrepl-turn-on-eldoc-mode)          ; Enable eldoc - shows fn argument list in echo area
(add-hook 'nrepl-mode-hook 'paredit-mode)                                  ; Use paredit in *nrepl* buffer

(add-to-list 'same-window-buffer-names "*nrepl*")                          ; Make C-c C-z switch to *nrepl*


    #+end_src

*** Cider
#+BEGIN_SRC emacs-lisp
(require 'cider)

(setq nrepl-hide-special-buffers t
      cider-repl-pop-to-buffer-on-connect nil
      cider-popup-stacktraces nil
      cider-repl-popup-stacktraces t)

#+END_SRC 

**** integration with ac-nrepl
     #+begin_src emacs-lisp 

     (use-package ac-nrepl
       :init (progn
               (add-hook 'cider-repl-mode-hook 'ac-nrepl-setup)
               (add-hook 'cider-mode-hook 'ac-nrepl-setup)
               (eval-after-load "auto-complete"
                 '(add-to-list 'ac-modes 'cider-repl-mode))
     (defun set-auto-complete-as-completion-at-point-function ()
       (setq completion-at-point-functions '(auto-complete)))
     (add-hook 'auto-complete-mode-hook 'set-auto-complete-as-completion-at-point-function)
     
     (add-hook 'cider-repl-mode-hook 'set-auto-complete-as-completion-at-point-function)
     (add-hook 'cider-mode-hook 'set-auto-complete-as-completion-at-point-function)
     (eval-after-load "cider"
       '(define-key cider-mode-map (kbd "C-c C-d") 'ac-nrepl-popup-doc))
               ))     
     #+end_src
** Miscellaneous
*** Backups
   #+BEGIN_SRC emacs-lisp
   (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))
   #+END_SRC
*** y-or-n
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)

#+END_SRC
*** Set initial buffer
    #+begin_src emacs-lisp 
    (setq initial-buffer-choice "~/org/home.org")
    #+end_src
*** Set PATH
    #+begin_src emacs-lisp 
      (setenv "PATH" (concat (getenv "PATH") ":/home/greg/.cabal/bin:/home/greg/.cask/bin"))
    #+end_src
*** Don't fire up another backtrace when an error happens in debug mode
   
   #+begin_src emacs-lisp 
   (setq eval-expression-debug-on-error t)
   #+end_src

*** Don't check spelling in every text-mode buffer
   #+begin_src emacs-lisp 
     (remove-hook 'text-mode-hook 'turn-on-flyspell)
   #+end_src
*** Key bindings
#+begin_src emacs-lisp 
;; (global-set-key (kbd "M-l") 'forward-word)
;; (global-set-key (kbd "M-h") 'backward-word)
;; (global-set-key (kbd "M-a") 'find-tag)
#+end_src
**** Always indent on newline

    #+begin_src emacs-lisp 
      (global-set-key (kbd "RET") 'newline-and-indent)
    #+end_src

**** Windows
     #+begin_src emacs-lisp 
       (global-set-key (kbd "C-ä") 'delete-other-windows)
       (global-set-key (kbd "C-Ä") 'delete-window)
       (global-set-key (kbd "ö") 'other-window)
     #+end_src

*** Markdown                                                         :ATTACH:
    #+begin_src emacs-lisp 
    (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
    (setq markdown-open-command "conkeror")
    (setq markdown-command "flavor.rb")
    #+end_src
*** Yasnippet
 Should be called before global-auto-complete-mode!
 #+begin_src emacs-lisp 
 (add-to-list 'load-path (concat user-emacs-directory "custom/yasnippet"))
 (require 'yasnippet)
 (yas-global-mode 1)
 #+end_src

*** Global-auto-complete-mode
    #+begin_src emacs-lisp 
    (require 'auto-complete)
    (global-auto-complete-mode t)
    (ac-config-default)
    (ac-set-trigger-key "TAB")
    (ac-set-trigger-key "<tab>")

    #+end_src

*** Open pdfs mit envince
    #+begin_src emacs-lisp 
      (delete '("\\.pdf\\'" . default) org-file-apps)
      (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince \"%s\""))
      (add-to-list 'org-file-apps '("\\.pdf::\\([0-9]+\\)\\'" . "evince \"%s\" -p %1"))
    #+end_src
** Evil
*** Evil-Leader
    #+begin_src emacs-lisp 
        (setq evil-leader/in-all-states t) 
        (global-evil-leader-mode)
        (evil-leader/set-leader "<SPC>")
        ;; (evil-leader/set-leader "-")

        (evil-leader/set-key

          "ef" 'find-file
          "sa" 'sauron-toggle-hide-show
          "so" 'org-save-all-org-buffers

          "sh" 'shell
          "es" 'start-erc
          "em" 'email
          "ff" 'find-function
          "fd" 'describe-function
          "<SPC>" 'switch-to-buffer
          ;; go back in current window
          "b" '(lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([32 32 return] 0 "%d")) arg))
          ;; go back in other window
          "z" '(lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([246 32 98 return 246] 0 "%d")) arg))
          "ww" 'save-buffer
          "wl" 'enlarge-window-horizontally
          "ws" 'shrink-window-horizontally
          "ci" 'evilnc-comment-or-uncomment-lines
          "cl" 'evilnc-comment-or-uncomment-to-the-line
          "x" 'smex
          "dd" 'ido-dired
          "dr" 'org-drill-directory
          "k" 'kill-buffer
          "l" 'ace-jump-line-mode
          "eb" 'erc-track-switch-buffer
          "jc" 'jabber-connect
          "tw" 'twit
          "gl" 'goto-line
          "ob" 'org-iswitchb
          "cs" 'org-caldav-sync
          "rm" 'bookmark-set
          "rb" 'bookmark-jump
          "rl" 'bookmark-bmenu-list
          "rs" 'bookmark-save
          "ma" 'evil-record-macro
    )
    #+end_src
*** Activate Evil
    #+begin_src emacs-lisp 
    (use-package evil
      :config (progn
                (evil-mode 1))
      :init
      (progn
        (define-key evil-insert-state-map "j"
          '(lambda ()
             (interactive)
             (insert "j")
             (let ((event (read-event nil)))
               (if (= event ?j)
                   (progn
                     (backward-delete-char 1)
                     (evil-normal-state))
                 (push event unread-command-events)))))
        (define-key evil-motion-state-map (kbd "C-S-u") 'evil-scroll-up)
        (define-key evil-motion-state-map (kbd "SPC") nil)
        (define-key evil-normal-state-map (kbd "U") 'evil-goto-first-line)
        (setq evil-emacs-state-modes (append evil-emacs-state-modes '(artist-mode sauron-mode ediff-mode org-agenda-mode jabber-roster twittering-mode dired-mode mu4e-main-mode mu4e-headers-mode mu4e-view-mode)))
        (evil-set-initial-state 'git-commit-mode 'insert)
        (setq evil-move-cursor-back nil)
        (setq evil-want-C-w-in-emacs-state t
              evilnc-hotkey-comment-operator "##")
        (define-key evil-motion-state-map (kbd "C-S-o") 'evil-execute-in-emacs-state)))
    #+end_src
*** Evil match-it
    #+begin_src emacs-lisp 
    (require 'evil-matchit)
    (global-evil-matchit-mode 1)
    #+end_src
*** Evil-Jumper
#+BEGIN_SRC emacs-lisp
(require 'evil-jumper)

(global-evil-jumper-mode)

#+END_SRC
** Guide-Key
#+BEGIN_SRC emacs-lisp
(use-package guide-key
  :diminish guide-key-mode
  :init
  (progn
  (setq guide-key/guide-key-sequence '("C-x r" "C-x 4" "C-c p" "C-c p s"))
  (guide-key-mode 1)))  ; Enable guide-key-mode
#+END_SRC
** Forth
    #+begin_src emacs-lisp 
    (load (concat user-emacs-directory "custom/gforth.el"))
    (autoload 'forth-mode "gforth.el")
    (setq auto-mode-alist (cons '("\\.fs\\'" . forth-mode) auto-mode-alist))
    ;; need to run run-forth in your forth file buffer
    #+end_src
** Octorgopress
    #+begin_src emacs-lisp 
    (add-to-list 'org-export-backends 'md)
    (load (concat user-emacs-directory "custom/octorgopress/octorgopress.el"))
    #+end_src
** Paredit
*** Key bindings
#+begin_src emacs-lisp 
(use-package paredit
  ;;     :commands paredit-mode
  :init
  (progn
    (define-key paredit-mode-map (kbd "C-M-h") 'paredit-backward)
    (define-key paredit-mode-map (kbd "C-M-l") 'paredit-forward)
    (define-key paredit-mode-map (kbd "C-(") 'paredit-backward-slurp-sexp)
    (define-key paredit-mode-map (kbd "C-{") 'paredit-backward-barf-sexp)
    (define-key paredit-mode-map (kbd "C-}") 'paredit-forward-barf-sexp)
    (define-key paredit-mode-map (kbd "C-)") 'paredit-forward-slurp-sexp)
    (define-key paredit-mode-map (kbd "C-M-j") 'paredit-splice-sexp-killing-forward)
    (define-key paredit-mode-map (kbd "C-M-k") 'paredit-splice-sexp-killing-backward)
    (define-key paredit-mode-map (kbd "C-c C-s") 'paredit-split-sexp )
    (define-key paredit-mode-map (kbd "C-c C-j") 'paredit-join-sexps)
    (define-key paredit-mode-map (kbd "C-c C-r") 'paredit-raise-sexp)
    (define-key paredit-mode-map (kbd "C-c x") 'paredit-open-curly)
    (define-key paredit-mode-map (kbd "C-M-s-l ") 'paredit-forward-down)
    (define-key paredit-mode-map (kbd "M-l") 'paredit-forward-up)
    (define-key paredit-mode-map (kbd "C-M-s-h ") 'paredit-backward-down)
    (define-key paredit-mode-map (kbd "M-h") 'paredit-backward-up)
    (define-key paredit-mode-map (kbd "C-c (") 'paredit-wrap-round)
    (define-key paredit-mode-map (kbd "C-c {") 'paredit-wrap-curly)
    (define-key paredit-mode-map (kbd "C-c [") 'paredit-wrap-square)
    ))

(add-hook 'emacs-lisp-mode-hook 'evil-paredit-mode)
#+end_src

** Gnuplot
    #+begin_src emacs-lisp 
    (require 'gnuplot)
    (global-set-key (kbd "C-M-g") 'org-plot/gnuplot)
    #+end_src
** Zotelo
#+BEGIN_SRC emacs-lisp
(load (concat user-emacs-directory "custom/zotelo.el"))
(require 'zotelo)
(add-hook 'TeX-mode-hook 'zotelo-minor-mode)

#+END_SRC
** Latex
#+BEGIN_SRC emacs-lisp
(setq TeX-PDF-mode t)
(setq reftex-plug-into-AUCTeX t)

(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)

(eval-after-load "tex"
  '(add-to-list 'TeX-command-list
    '("Pdflatex" "pdflatex -interaction nonstopmode %s" TeX-run-command t t :help "Run Pdflatex") t))


#+END_SRC
** Copy buffer filename
   #+BEGIN_SRC emacs-lisp
(defun prelude-copy-file-name-to-clipboard ()
  "Copy the current buffer file name to the clipboard."
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (kill-new filename)
      (message "Copied buffer file name '%s' to the clipboard." filename))))
#+END_SRC
** Org
*** Images
#+begin_src emacs-lisp 
(setq org-startup-with-inline-images t)
#+end_src
*** Org-directory
    #+begin_src emacs-lisp 
      (setq org-directory "~/org")
    #+end_src
*** Org-completion
org-completion-use-ido is used by org-iswitchb
#+BEGIN_SRC emacs-lisp
(setq org-completion-use-ido t)
#+END_SRC
*** Org-goto
#+BEGIN_SRC emacs-lisp
(setq org-goto-interface 'outline-path-completion)
#+END_SRC
*** Org clocking
[[info:org#Resolving%20idle%20time][info:org#Resolving idle time]]
#+BEGIN_SRC emacs-lisp
;;; Clock Continuously with: Cu Cu Cu Cc Cx Ci 
(setq org-clock-continuously nil)
(bind-key "C-c j" 'org-clock-goto)
(setq org-clock-idle-time t)
#+END_SRC
*** Refiling
    #+begin_src emacs-lisp 
      (defun my/org-refile-within-current-buffer ()
        "Move the entry at point to another heading in the current buffer."
        (interactive)
        (let ((org-refile-targets '((nil :maxlevel . 5))))
          (org-refile)))
      
      (global-set-key (kbd "C-c C-S-w") 'my/org-refile-within-current-buffer)
    #+end_src
*** TODO-Items
    #+begin_src emacs-lisp 
    (setq org-todo-keywords (quote
                             (
                              (sequence "TOREAD(!)" "READING(!)" "WAIT(!)" "|" "READ(!)" "NOREAD(!)")
                              (sequence "TOHABIT" "|" "HABITDONE(!)")
                              (type "BOOKMARK" "PAY" "DIARY" "VOC" "|" "NOTHING") ;
                              (sequence "TOBUY(!)" "|" "BOUGHT(!)" "NOBUY(!)")
                              (sequence "TODO(@!)" "STARTED(!)" "WAIT(!@)" "|" "DONE(@!)" "NODO(@!)")
                              (sequence "TOLOOKAT(!)" "STARTED(!)" "WAIT(!)" "|" "LOOKEDAT(!)" "NOLOOK(@!)")
                              (sequence "TOBLOG(!)" "|" "BLOGGED(!)" "NOBLOG(!@)")
                              )))
    (setq org-log-into-drawer nil)
    (setq org-log-done 'note)
    (setq org-todo-keyword-faces
          '(
            ("TODO"  . (:foreground "green" :weight bold))
            ("STARTED"  . (:foreground "orange" :weight bold))
            ("TOBLOG"  . (:foreground "green" :weight bold))
            ("TOHABIT"  . (:foreground "green" :weight bold))
            ("TOLOOKAT"  . (:foreground "green" :weight bold))
            ("TOREAD"  . (:foreground "green" :weight bold))
            ("TOBUY"  . (:foreground "green" :weight bold))
            ("DONE" . (:foreground "cyan" :weight bold))
            ("LOOKEDAT" . (:foreground "cyan" :weight bold))
            ("BLOGGED" . (:foreground "cyan" :weight bold))
            ("BOUGHT" . (:foreground "cyan" :weight bold))
            ("READ" . (:foreground "cyan" :weight bold))
            ("WAIT" . (:foreground "red" :weight bold))
            ("NODO"  . shadow)
            ("NOBLOG"  . shadow)
            ("NOLOOK"  . shadow)
            ("NOREAD"  . shadow)
            ("NOBUY"  . shadow)
            ))

    (setq org-global-properties '(("Effort_ALL". "0 0:10 0:30 1:00 2:00 3:00 4:00")))

    (setq org-fontify-done-headline t)
    (custom-set-faces
     '(org-done ((t (:foreground "PaleGreen"   
                     :weight normal
                     :strike-through t))))
     '(org-headline-done 
                ((((class color) (min-colors 16) (background dark)) 
                   (:foreground "LightSalmon" :strike-through t)))))
    #+end_src
*** Refiling to datatree
#+begin_src emacs-lisp 
(require 'org-datetree)
(defun pc/org-refile-to-datetree (journal)
  "Refile an entry to journal file's date-tree"
  (interactive "fRefile to: ")
  (let* ((journal (expand-file-name journal org-directory))
         (date-string (or (org-entry-get (point) "TIMESTAMP_IA")
                          (org-entry-get (point) "TIMESTAMP")))
         (dct (decode-time (or (and date-string (org-time-string-to-time date-string))
                               (current-time))))
         (date (list (nth 4 dct) (nth 3 dct) (nth 5 dct))))
    (org-cut-subtree)
    (with-current-buffer (or (find-buffer-visiting journal)
                             (find-file-noselect journal))
      (org-mode)
      (save-excursion
        (org-datetree-file-entry-under (current-kill 0) date)
        (bookmark-set "org-refile-last-stored")))
    (message "Refiled to %s" journal)))
#+end_src
*** Captures
#+begin_src emacs-lisp  :name captures
(use-package org-protocol
             :init (progn
                     (setq org-protocol-default-template-key "l")
                     (setq org-capture-templates
                           '(("t" "Todo" entry (file+olp "~/org/home.org" "Tasks")
                              "* TODO %?")
                             ("l" "TOBLOG" entry (file+olp "~/org/home.org" "Blog")
                              "* TOBLOG %^{Heading}\n\t%?")
                             ;; ("l" "starting with l... ")
                             ("i" "Link" entry (file+olp "~/org/bookmarks.org" "Bookmarks")
                              "* %a\n %?\n %i")
                             ("b" "TOBLOG from Browser" entry (file+olp "~/org/home.org" "Blog")
                              "* TOBLOG %?\n\t%a")
                             ("o" "TOLOOKAT" entry (file+olp "~/org/home.org" "Tasks")
                              "* TOLOOKAT %?")
                             ("u" "TOLOOKAT from Browser" entry (file+olp "~/org/home.org" "Tasks")
                              "* TOLOOKAT %?\n\t%a")
                             ("t" "TODO from Browser" entry (file+olp "~/org/home.org" "Tasks")
                              "* TODO %?\n\t%a")
                             ("p" "Project" entry (file+olp "~/org/projects.org" "Programming")
                              "* %^{Heading}\n\t%?")
                             ("r" "TOREAD" entry (file+olp "~/org/home.org" "Bücher")
                              "* TOREAD %^{Heading}\n\t%?")
                             ("y" "Journal prompted" item (file+datetree+prompt "~/org/journal.org.gpg")
                              "%?")
                             ("j" "Journal" item (file+datetree "~/org/journal.org.gpg")
                              "%?")))
                     (define-key global-map "\C-cc" 'org-capture)))
#+end_src
*** Agenda
#+begin_src emacs-lisp 
  (setq org-agenda-files (list "~/org/thesis.org" "~/org/wiki" "~/org/cal.org" "~/org/bookmarks.org" "~/org/projects.org" "~/org/home.org" "~/org/french.org"))
  (setq org-agenda-custom-commands
        '(("d" "Show stuff from diverse files" (
            (agenda "")
            (todo "" ((org-agenda-files '("~/org/thesis.org"))))
            (tags-todo "-TODO=\"TOBLOG\"-TODO=\"TOHABIT\"" ((org-agenda-files '("~/org/home.org"))))
            (todo "" ((org-agenda-files '("~/org/wiki/orgstuff.org"))))
            (todo "" ((org-agenda-files '("~/org/wiki/emacs.org"))))
            ))))


  (setq org-agenda-sorting-strategy '((agenda habit-down time-up priority-down category-up)
   (todo category-down priority-down)
   (tags priority-down category-up)
   (search category-up)))

  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-skip-scheduled-if-done t)

  ;; (defun org-my-auto-exclude-function (tag)
  ;;   (and (or (string= tag "keys") (string= tag "drill"))
  ;;        (concat "-" tag)))

  (defun org-my-auto-exclude-function (tag)
    (and (string= tag "keys") (concat "-" tag)))

  (setq org-agenda-auto-exclude-function 'org-my-auto-exclude-function)
#+end_src

**** Sometimes Agenda doesn't work
    #+begin_src emacs-lisp 
      (setq org-agenda-archives-mode nil)
      (setq org-agenda-skip-comment-trees nil)
      (setq org-agenda-skip-function nil)
    #+end_src
*** Calendar
    #+begin_src emacs-lisp 
    (load-file "~/.emacs.d/custom/caldav/org-caldav.el")
    (use-package org-caldav
      :init (progn 
              (setq org-icalendar-exclude-tags (quote ("training" "habit")))
              (setq org-caldav-select-tags '("cal"))

              (setq org-icalendar-include-body nil)
              (setq org-icalendar-use-scheduled (quote nil))
              (setq org-caldav-calendar-id "lm94as0bqk7f5f6kmluf0k655c@group.calendar.google.com")
              (setq org-icalendar-timezone "Europe/Berlin")
              (setq org-caldav-inbox "~/org/cal.org")
              (setq org-caldav-files (list "~/org/home.org"))
              (setq org-caldav-sync-changes-to-org 'title-only)
              (setq org-icalendar-include-todo nil)
              (setq org-icalendar-store-UID t)
              ))

    #+end_src
*** General
    #+begin_src emacs-lisp 
    (setq org-refile-targets (quote ((org-agenda-files :maxlevel . 2))))
    (setq org-M-RET-may-split-line nil)
    (setq org-goto-interface 'outline org-goto-max-level 10)
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
    (global-set-key "\C-cL" 'org-store-link)
    (global-set-key "\C-ca" 'org-agenda)

    (global-set-key (kbd "M-o") 'imenu)

    (setq org-log-done 'time)
    (setq org-return-follows-link t)
    #+end_src
*** Clocking
#+begin_src emacs-lisp 
    (setq org-clock-persist t)
(setq org-clock-report-include-clocking-task t)
    (org-clock-persistence-insinuate)
(defun sacha/org-clock-in-set-state-to-started ()
  "Mark STARTED when clocked in."
  (save-excursion
    (catch 'exit
      (cond
       ((derived-mode-p 'org-agenda-mode)
        (let* ((marker (or (org-get-at-bol 'org-marker)
                           (org-agenda-error)))
               (hdmarker (or (org-get-at-bol 'org-hd-marker) marker))
               (pos (marker-position marker))
               (col (current-column))
               newhead)
          (org-with-remote-undo (marker-buffer marker)
            (with-current-buffer (marker-buffer marker)
              (widen)
              (goto-char pos)
              (org-back-to-heading t)
              (if (org-get-todo-state)
                  (org-todo "STARTED"))))))
       (t (if (or (equal "TODO" (org-get-todo-state))
                  (equal "TOLOOKAT" (org-get-todo-state)))
                  (org-todo "STARTED")))))))
(add-hook 'org-clock-in-hook 'sacha/org-clock-in-set-state-to-started)
#+end_src
*** Estimating Tasks
#+begin_src emacs-lisp 
(add-hook 'org-clock-in-prepare-hook
          'sacha/org-mode-ask-effort)

(defun sacha/org-mode-ask-effort ()
  "Ask for an effort estimate when clocking in."
  (unless (org-entry-get (point) "Effort")
    (let ((effort
           (completing-read
            "Effort: "
            (org-entry-get-multivalued-property (point) "Effort"))))
      (unless (equal effort "")
        (org-set-property "Effort" effort)))))
#+end_src

*** Export
#+begin_src emacs-lisp 
(setq org-export-with-toc nil)
#+end_src
*** Org-learn
    #+begin_src emacs-lisp 
    (load-file (concat user-emacs-directory "custom/org-mode/contrib/lisp/org-learn.el"))
    (require 'org-learn)
    #+end_src
*** Org-freemind
     #+begin_src emacs-lisp 
     (require 'org-freemind)
     (load-file (concat user-emacs-directory "custom/org-mode/contrib/lisp/ox-freemind.el"))
     (require 'ox-freemind)
     #+end_src
*** Org-effectiveness
    #+begin_src emacs-lisp 
    (load-file (concat user-emacs-directory "custom/org-mode/contrib/lisp/org-effectiveness.el"))
    (require 'org-effectiveness)
    #+end_src
*** Org-velocity
    #+begin_src emacs-lisp 
    (load-file (concat user-emacs-directory "custom/org-mode/contrib/lisp/org-velocity.el"))
    (require 'org-velocity)
    #+end_src
*** Org-habit
#+begin_src emacs-lisp 
(require 'org-habit)
(setq org-habit-show-habits-only-for-today t)
#+end_src

*** Org-drill
    #+begin_src emacs-lisp 
    (load-file (concat user-emacs-directory "custom/org-mode/contrib/lisp/org-drill.el"))
    (use-package org-drill
      :init (progn (setq org-drill-learn-fraction 0.45)
                   (setq org-drill-match "-nodrill")))
    #+end_src
*** Org-mobile
    #+begin_src emacs-lisp 
    ;; (add-hook 'after-init-hook 'org-mobile-pull)
    ;; (add-hook 'after-init-hook '(lambda () (
    ;;                                    (org-agenda-list)
    ;;                                    (switch-to-buffer "*Org Agenda*")
    ;;                                    )))
    (add-hook 'kill-emacs-hook 'org-mobile-push)
    (setq org-mobile-inbox-for-pull "~/org/notes.org")
    (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
    (setq org-mobile-files (list "thesis.org" "bookmarks.org" "projects.org" "wiki" "home.org" "french.org"))

    (global-set-key [f2] 'org-agenda-list)
    (global-set-key [f12] 'org-mobile-push)
    (global-set-key [f11] 'org-mobile-pull)
    #+end_src
*** Org-Babel
    #+begin_src emacs-lisp 
      (setq org-src-fontify-natively t)
      (setq org-confirm-babel-evaluate nil)
      (setq org-src-window-setup 'current-window)
     ;; Let's have pretty source code blocks
     (setq org-edit-src-content-indentation 0
           org-src-tab-acts-natively t
           org-confirm-babel-evaluate nil)
     
    #+end_src
**** Structure-template-alist
#+BEGIN_SRC emacs-lisp
(eval-after-load 'org
  '(progn (add-to-list 'org-structure-template-alist
                       '("k" "#+BEGIN_SRC haskell :results silent\n?\n#+END_SRC"
                         "<src lang='haskell'>\n?\n</src>"))
          (add-to-list 'org-structure-template-alist
                       '("c" "#+begin_src clojure :tangle src/\n?\n#+end_src"
                         "<src lang='clojure'>\n?\n</src>"))

          (add-to-list 'org-structure-template-alist
                       '("r"
                         "#+begin_src R :results silent :session sess1\n?\n#+end_src"
                         "<src lang='R'>\n?\n</src>"))
          (add-to-list 'org-structure-template-alist
                       '("x" 
                         "#+begin_src emacs-lisp \n?\n#+end_src"
                         "<src lang='emacs-lisp'>\n?\n</src>"))
          (org-agenda-list)
          (switch-to-buffer "*Org Agenda*")
          ))
#+END_SRC
**** Babel Languages
     #+begin_src emacs-lisp 
     (eval-after-load 'org
       (progn
         '(org-babel-do-load-languages
           'org-babel-load-languages
           '((emacs-lisp . t)
             (R . t)
             (haskell . t)
             (gnuplot . t)
             (sqlite . t)
             (sh . t)
             (js . t)
             (C . t)
             (dot . t)))))
     #+end_src
           
**** R 
#+BEGIN_SRC emacs-lisp
      (require 'ess)
#+END_SRC
**** Clojure
#+begin_src emacs-lisp 

(require 'ob-clojure)
(add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))

     ;; Use cider as the clojure execution backend
     (setq org-babel-clojure-backend 'cider) ;
     

(defvar org-babel-default-header-args:clojure 
'((:results . "silent")))
#+end_src
**** Haskell
#+begin_src emacs-lisp 
;; (load-file "~/.emacs.d/custom/ob-haskell.el")
(require 'ob-haskell)
#+end_src
*** Org-attach
    #+begin_src emacs-lisp 
      (require 'org-attach)
      (org-add-link-type "att" 'org-attach-open-link)
      (defun org-attach-open-link (file)
        (org-open-file (org-attach-expand file)))
      (set-variable 'org-attach-store-link-p t)
    #+end_src
*** Org-dotemacs
#+begin_src emacs-lisp 
  (setq org-dotemacs-default-file (concat user-emacs-directory "configuration.org"))
#+end_src
*** Latex
**** Include Bibtex call
#+begin_src emacs-lisp 
  (use-package org-latex
    :init (progn
            (setq org-latex-create-formula-image-program 'dvipng)
            (setq org-latex-pdf-process '("pdflatex -interaction nonstopmode -output-directory %o %f""pdflatex -interaction nonstopmode -output-directory %o %f" "bibtex %b" "pdflatex -interaction nonstopmode -output-directory %o %f"))
            (add-to-list 'org-latex-classes
                         '("termpaper"
                           "\\documentclass{article}
                 [NO-DEFAULT-PACKAGES]
                 [NO-PACKAGES]"
                           ("\\section{%s}" . "\\section*{%s}")
                           ("\\subsection{%s}" . "\\subsection*{%s}")
                           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                           ("\\paragraph{%s}" . "\\paragraph*{%s}")
                           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                         )
            ))
  
#+end_src
**** Beamer
#+begin_src emacs-lisp 
(use-package ox-beamer)
(setq org-beamer-outline-frame-options "")
#+end_src
*** Org-rss
#+begin_src emacs-lisp 

(setq org-feed-alist
      '(("Noetic Nought"
         "http://punchagan.muse-amuse.in/rss.xml"
         "~/org/feeds.org" "Noetic Nought")))
#+end_src

*** Start agenda
#+begin_src emacs-lisp 
(org-agenda-list)
(switch-to-buffer "*Org Agenda*")

(defun show-agenda (theFrame)
  "Show the agenda"
  (org-agenda-list)
  (switch-to-buffer "*Org Agenda*"))

(add-hook 'after-make-frame-functions 'show-agenda)
#+end_src
** Haskell
*** Loading
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path (concat user-emacs-directory "custom/haskell-mode"))
(load "haskell-mode-autoloads.el")

(require 'w3m-haddock)
(add-hook 'w3m-display-hook 'w3m-haddock-display)
#+END_SRC
*** Settings
    #+begin_src emacs-lisp 
    (setq haskell-hoogle-command nil)
    (setq haskell-package-conf-file "/usr/local/lib/ghc-7.8.2/package.conf")
    (setq haskell-process-path-cabal-dev "/home/greg/.cabal/bin/cabal")
    (setq haskell-process-path-ghci "ghci")
    (setq haskell-process-suggest-remove-import-lines nil)
    (setq haskell-process-suggest-hoogle-imports t)
    (setq haskell-interactive-popup-errors nil)
    (setq haskell-interactive-types-for-show-ambiguous t)
    (setq haskell-process-auto-import-loaded-modules t)
    (setq haskell-process-prompt-restart-on-cabal-change t)
    (setq haskell-process-suggest-language-pragmas nil)
    (setq haskell-process-type (quote cabal-repl))
    (setq haskell-process-args-ghci '("-package-conf" ".cabal-sandbox/x86_64-linux-ghc-7.8.2-packages.conf.d" "-i../dist/build/autogen" "-idist/build/autogen" "-isrc" "-i../src" "-fno-warn-unused-binds"))
    (setq haskell-program-name "cabal repl")
    (setq haskell-stylish-on-save nil)
    (setq haskell-process-log t)
    (setq haskell-process-args-cabal-repl '("--ghc-option=-ferror-spans" "--ghc-option=+RTS" "--ghc-option=-M1.5g")) 

    (setq haskell-tags-on-save nil)
    (setq inferior-haskell-web-docs-base "http://hackage.haskell.org/package/")
    (setq ghc-core-program-args '("-O0" "-dsuppress-all"))
    #+end_src
*** Evil leader
#+begin_src emacs-lisp 

(evil-leader/set-key-for-mode 'haskell-mode "fh" 'inferior-haskell-find-haddock)
(evil-leader/set-key-for-mode 'haskell-mode "ca" 'haskell-cabal-visit-file)
(evil-leader/set-key-for-mode 'haskell-mode "jd" 'haskell-mode-jump-to-def-or-tag)
#+end_src
*** Hooks
   #+begin_src emacs-lisp 
   (eval-after-load "haskell-mode"
     '(progn
        ;; (define-key haskell-mode-map (kbd "C-x C-d") nil)
        (define-key haskell-mode-map (kbd "C-,") 'haskell-move-nested-left)
        (define-key haskell-mode-map (kbd "C-.") 'haskell-move-nested-right)
        (define-key haskell-mode-map "\C-ch" 'haskell-hoogle)
        (define-key haskell-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
        (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-file)
        (define-key haskell-mode-map (kbd "C-c C-b") 'haskell-interactive-switch)
        ;; (define-key haskell-mode-map (kbd "C-c C-d") 'haskell-w3m-open-haddock)
        (define-key haskell-mode-map (kbd "C-c C-d") 'inferior-haskell-find-haddock)
        (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)

        (add-to-list 'auto-mode-alist '("\\.cabal\\'" . evil-mode))
        (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
        (define-key haskell-mode-map (kbd "SPC") 'haskell-mode-contextual-space)
        (define-key haskell-mode-map (kbd "C-c M-.") 'haskell-mode-jump-to-def-or-tag)
        ;; (define-key haskell-mode-map (kbd "C-c C-d") nil)
        ))
   (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
   (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
   (add-hook 'haskell-mode-hook 'flymake-haskell-multi-load)

   (defun haskell-hook ()
     ;; (define-key evil-normal-state-map (kbd "M-.") 'haskell-mode-jump-to-def-or-tag)
     (define-key haskell-mode-map (kbd "C-#") 'haskell-interactive-bring))

   (defun haskell-cabal-hook ()
     (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
     (define-key haskell-cabal-mode-map (kbd "C-c c") 'haskell-process-cabal)
     (define-key haskell-cabal-mode-map (kbd "C-c C-l") 'save-buffer)
     (define-key haskell-cabal-mode-map (kbd "C-#") 'haskell-interactive-bring)
     (define-key haskell-cabal-mode-map [?\C-c ?\C-z] 'haskell-interactive-switch))

   (defun no-evil-leader ()
     (setq-local evil-leader/in-all-states nil))

   (add-hook 'haskell-cabal-mode-hook 'haskell-cabal-hook)
   (add-hook 'haskell-cabal-mode-hook 'no-evil-leader)
   (add-hook 'haskell-mode-hook 'haskell-hook)
   #+end_src
*** Aligments
#+BEGIN_SRC emacs-lisp
(eval-after-load "align" '(progn
(add-to-list 'align-rules-list
             '(haskell-types
               (regexp . "\\(\\s-+\\)\\(::\\|∷\\)\\s-+")
               (modes quote (haskell-mode literate-haskell-mode))))
(add-to-list 'align-rules-list
             '(haskell-assignment
               (regexp . "\\(\\s-+\\)=\\s-+")
               (modes quote (haskell-mode literate-haskell-mode))))
(add-to-list 'align-rules-list
             '(haskell-arrows
               (regexp . "\\(\\s-+\\)\\(->\\|→\\)\\s-+")
               (modes quote (haskell-mode literate-haskell-mode))))
(add-to-list 'align-rules-list
             '(haskell-left-arrows
               (regexp . "\\(\\s-+\\)\\(<-\\|←\\)\\s-+")
               (modes quote (haskell-mode literate-haskell-mode))))))
#+END_SRC
*** Imports
#+BEGIN_SRC emacs-lisp
(define-key haskell-mode-map [f8] 'haskell-navigate-imports)
#+END_SRC
*** Flymake
    #+begin_src emacs-lisp 
      (eval-after-load 'flymake '(require 'flymake-cursor))
      (setq flymake-cursor-number-of-errors-to-display nil)
      (setq flymake-gui-warnings-enabled nil)
      (define-key haskell-mode-map  (kbd "C-c e") 'flymake-display-err-menu-for-current-line)
      (define-key haskell-mode-map (kbd "C-c C-n") 'flymake-goto-next-error)
      (define-key haskell-mode-map  (kbd "C-c C-p") 'flymake-goto-next-error)
    #+end_src
** Jabber
#+BEGIN_SRC emacs-lisp
(setq jabber-account-list  '(("sleepomeno@blah.im/emacs")))
#+END_SRC
** OTR
#+BEGIN_SRC emacs-lisp
;; (load-file (concat user-emacs-directory "custom/jabber-otr/jabber-otr.el"))
#+END_SRC
** Projectile
   #+begin_src emacs-lisp 
     (setq projectile-use-native-indexing t)
   #+end_src
** Artist mode
#+begin_src emacs-lisp 
(eval-after-load "artist"
   '(define-key artist-mode-map [(down-mouse-3)] 'artist-mouse-choose-operation)
   ) 

    ;;; integrate ido with artist-mode
   (defun artist-ido-select-operation (type)
     "Use ido to select a drawing operation in artist-mode"
     (interactive (list (ido-completing-read "Drawing operation: " 
                                             (list "Pen" "Pen Line" "line" "straight line" "rectangle" 
                                                   "square" "poly-line" "straight poly-line" "ellipse" 
                                                   "circle" "text see-thru" "text-overwrite" "spray-can" 
                                                   "erase char" "erase rectangle" "vaporize line" "vaporize lines" 
                                                   "cut rectangle" "cut square" "copy rectangle" "copy square" 
                                                   "paste" "flood-fill"))))
     (artist-select-operation type))

 (defun artist-ido-select-settings (type)
     "Use ido to select a setting to change in artist-mode"
     (interactive (list (ido-completing-read "Setting: " 
                                             (list "Set Fill" "Set Line" "Set Erase" "Spray-size" "Spray-chars" 
                                                   "Rubber-banding" "Trimming" "Borders"))))
     (if (equal type "Spray-size") 
       (artist-select-operation "spray set size")
       (call-interactively (artist-fc-get-fn-from-symbol 
          (cdr (assoc type '(("Set Fill" . set-fill)
                 ("Set Line" . set-line)
                 ("Set Erase" . set-erase)
                 ("Rubber-banding" . rubber-band)
                 ("Trimming" . trimming)
                 ("Borders" . borders)
                 ("Spray-chars" . spray-chars))))))))

(add-hook 'artist-mode-init-hook 
       (lambda ()
         (define-key artist-mode-map (kbd "C-c C-a C-o") 'artist-ido-select-operation)
         (define-key artist-mode-map (kbd "C-c C-a C-g") 'djcb-ditaa-generate)
         (define-key artist-mode-map (kbd "C-c C-a C-c") 'artist-ido-select-settings)))

(setq ditaa-cmd "java -jar ~/bin/ditaa.jar")
(defun djcb-ditaa-generate ()
  (interactive)
  (shell-command
    (concat ditaa-cmd " " buffer-file-name)))
#+end_src
** Common Lisp
   #+begin_src emacs-lisp 
     (setq inferior-lisp-program "/usr/bin/clisp")
   #+end_src
** Ignore Running Processes
#+begin_src emacs-lisp 
;; add `flet'
(require 'cl)

(defadvice save-buffers-kill-emacs
  (around no-query-kill-emacs activate)
  "Prevent \"Active processes exist\" query on exit."
  (flet ((process-list ())) ad-do-it))

#+end_src
** Guess programs by file extension
 #+begin_src emacs-lisp 
 (require 'dired-x)

 (setq dired-guess-shell-alist-user
       '(("\\.pdf\\'" "evince" "okular")
         ("\\.\\(?:djvu\\|eps\\)\\'" "evince")
         ("\\.\\(?:jpg\\|jpeg\\|png\\|gif\\|xpm\\)\\'" "eog")
         ("\\.\\(?:xcf\\)\\'" "gimp")
         ("\\.csv\\'" "libreoffice")
         ("\\.tex\\'" "pdflatex" "latex")
         ("\\.\\(?:mp4\\|mkv\\|avi\\|flv\\|ogv\\)\\(?:\\.part\\)?\\'"
          "vlc")
         ("\\.\\(?:mp3\\|flac\\)\\'" "rhythmbox")
         ("\\.html?\\'" "conkeror")
         ("\\.cue?\\'" "audacious")))

 #+end_src
** Remove Garbage files in dired
#+begin_src emacs-lisp 
(setq dired-garbage-files-regexp
      "\\.idx\\|\\.run\\.xml$\\|\\.bbl$\\|\\.bcf$\\|.blg$\\|-blx.bib$\\|.nav$\\|.snm$\\|.out$\\|.synctex.gz$\\|\\(?:\\.\\(?:aux\\|bak\\|dvi\\|log\\|orig\\|rej\\|toc\\|pyg\\)\\)\\'")

(define-key dired-mode-map (kbd "%^") 'dired-flag-garbage-files)


#+end_src
** Ignore unimportant files in dired
#+begin_src emacs-lisp 
(define-key dired-mode-map (kbd "M-o") 'dired-omit-mode)
(setq dired-omit-files "\\(?:.*\\.\\(?:aux\\|log\\|synctex\\.gz\\|run\\.xml\\|bcf\\|am\\|in\\)\\'\\)\\|^\\.\\|-blx\\.bib")

#+end_src
** Shell name
#+begin_src emacs-lisp 
(setq explicit-shell-file-name "/bin/bash")
#+end_src
** Bookmarks
#+begin_src emacs-lisp 
(setq 
  bookmark-default-file "~/.emacs.d/bookmarks" ;; keep my ~/ clean
  bookmark-save-flag 1)                        ;; autosave each change)
#+end_src
** 2048
#+begin_src emacs-lisp 
(defface 2048-face-2    '((t . (:background "khaki" :foreground "black"))) "Face for the tile 2" :group '2048-faces)
(defface 2048-face-4    '((t . (:background "burlywood" :foreground "black"))) "Face for the tile 4" :group '2048-faces)
(defface 2048-face-8    '((t . (:background "orange3" :foreground "black"))) "Face for the tile 8" :group '2048-faces)
(defface 2048-face-16   '((t . (:background "orange" :foreground "black"))) "Face for the tile 16" :group '2048-faces)
(defface 2048-face-32   '((t . (:background "orange red" :foreground "black"))) "Face for the tile 32" :group '2048-faces)
(defface 2048-face-64   '((t . (:background "firebrick" :foreground "white"))) "Face for the tile 64" :group '2048-faces)
(defface 2048-face-128  '((t . (:background "dark red" :foreground "white"))) "Face for the tile 128" :group '2048-faces)
(defface 2048-face-256  '((t . (:background "dark magenta" :foreground "white"))) "Face for the tile 256" :group '2048-faces)
(defface 2048-face-512  '((t . (:background "magenta" :foreground "black"))) "Face for the tile 512" :group '2048-faces)
(defface 2048-face-1024 '((t . (:background "gold" :foreground "black"))) "Face for the tile 1024" :group '2048-faces)
(defface 2048-face-2048 '((t . (:background "yellow" :foreground "black"))) "Face for the tile 2048" :group '2048-faces)


  (defun sacha/2048-set-font-size ()
    (text-scale-set 5)
    (goto-char (point-min)))

  (use-package 2048-game
    :config
    (progn
     (add-hook '2048-mode-hook 'sacha/2048-set-font-size)))
#+end_src
** Youtube Download
#+begin_src emacs-lisp 
(defun youtube-dl ()
  (interactive)
  (let* ((str (current-kill 0))
         (default-directory "~/Downloads")
         (proc (get-buffer-process (ansi-term "/bin/bash"))))
    (term-send-string
    ;; (shell-command
     proc
     (concat "cd ~/Downloads/youtube && youtube-dl " str "\n"))))

#+end_src
