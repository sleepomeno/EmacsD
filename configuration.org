* Configuration
  
** Personal Information  
   
#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Gregor Riegler"
        user-mail-address "gregor.riegler@gmail.com")
#+END_SRC

** Encryption
   #+BEGIN_SRC emacs-lisp
   (require 'epa-file)
   (epa-file-enable)
   #+END_SRC
** Ido
#+begin_src emacs-lisp 
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.

(setq ido-enable-flex-matching t)
(setq ido-use-faces nil)
(setq gc-cons-threshold 20000000)

;; (setq ido-enable-prefix t
;;       ido-enable-flex-matching t)
#+end_src

** Load-Path
   #+begin_src emacs-lisp 
     (add-to-list 'load-path (concat user-emacs-directory "custom"))
     (add-to-list 'load-path (concat user-emacs-directory "custom/use-package"))
   #+end_src
** Kill process
#+begin_src emacs-lisp 
  (define-key process-menu-mode-map (kbd "C-k") 'joaot/delete-process-at-point)
  
  (defun joaot/delete-process-at-point ()
    (interactive)
    (let ((process (get-text-property (point) 'tabulated-list-id)))
      (cond ((and process
                  (processp process))
             (delete-process process)
             (revert-buffer))
            (t
             (error "no process at point!")))))
#+end_src
** Dired
#+begin_src emacs-lisp 
(require 'dired-details+)
#+end_src
** Use-package
   #+begin_src emacs-lisp 
     (require 'use-package)
     (require 'bind-key)
   #+end_src
** Clojure
*** Load the provided Clojure start kit configurations
    #+begin_src emacs-lisp 
      (load (concat user-emacs-directory "clojure-starter-kit.el"))
    #+end_src

*** Cider
#+BEGIN_SRC emacs-lisp
(require 'cider)
(require 'ob-clojure)

(setq nrepl-hide-special-buffers t
      cider-repl-pop-to-buffer-on-connect nil
      cider-popup-stacktraces nil
      cider-repl-popup-stacktraces t)

     ;; Use cider as the clojure execution backend
     (setq org-babel-clojure-backend 'cider) ;
     
     ;; Let's have pretty source code blocks
     (setq org-edit-src-content-indentation 0
           org-src-tab-acts-natively t
           org-src-fontify-natively t
           org-confirm-babel-evaluate nil)
     
    (eval-after-load 'org
      '(progn (add-to-list 'org-structure-template-alist '("k" "#+BEGIN_SRC haskell :results silent\n?\n#+END_SRC" "<src lang='haskell'>\n?\n</src>")) (add-to-list 'org-structure-template-alist
                           '("c" "#+begin_src clojure :tangle src/\n?\n#+end_src", "<src lang='clojure'>\n?\n</src>"))))
#+END_SRC 

**** integration with ac-nrepl
     #+begin_src emacs-lisp 

     (use-package ac-nrepl
       :init (progn
               (add-hook 'cider-repl-mode-hook 'ac-nrepl-setup)
               (add-hook 'cider-mode-hook 'ac-nrepl-setup)
               (eval-after-load "auto-complete"
                 '(add-to-list 'ac-modes 'cider-repl-mode))
     (defun set-auto-complete-as-completion-at-point-function ()
       (setq completion-at-point-functions '(auto-complete)))
     (add-hook 'auto-complete-mode-hook 'set-auto-complete-as-completion-at-point-function)
     
     (add-hook 'cider-repl-mode-hook 'set-auto-complete-as-completion-at-point-function)
     (add-hook 'cider-mode-hook 'set-auto-complete-as-completion-at-point-function)
     (eval-after-load "cider"
       '(define-key cider-mode-map (kbd "C-c C-d") 'ac-nrepl-popup-doc))
               ))     
     #+end_src
** Miscellaneous
*** Set initial buffer
    #+begin_src emacs-lisp 
       (setq initial-buffer-choice "~/org/home.org")
    #+end_src
*** Set PATH
    #+begin_src emacs-lisp 
      (setenv "PATH" (concat (getenv "PATH") ":/home/greg/.cabal/bin:/home/greg/.cask/bin"))
    #+end_src
*** Don't fire up another backtrace when an error happens in debug mode
   
   #+begin_src emacs-lisp 
     (setq eval-expression-debug-on-error nil)
   #+end_src

*** Don't check spelling in every text-mode buffer
   #+begin_src emacs-lisp 
     (remove-hook 'text-mode-hook 'turn-on-flyspell)
   #+end_src
*** Key bindings
#+begin_src emacs-lisp 
;; (global-set-key (kbd "M-l") 'forward-word)
;; (global-set-key (kbd "M-h") 'backward-word)
;; (global-set-key (kbd "M-a") 'find-tag)
#+end_src
**** Always indent on newline

    #+begin_src emacs-lisp 
      (global-set-key (kbd "RET") 'newline-and-indent)
    #+end_src

**** Windows
     #+begin_src emacs-lisp 
       (global-set-key (kbd "C-ä") 'delete-other-windows)
       (global-set-key (kbd "C-Ä") 'delete-window)
       (global-set-key (kbd "ö") 'other-window)
     #+end_src

*** Markdown
    #+begin_src emacs-lisp 
    (add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))
    (add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
    (setq markdown-open-command "google-chrome")
    #+end_src

*** Global-auto-complete-mode
    #+begin_src emacs-lisp 
    (require 'auto-complete)
    (global-auto-complete-mode t)
    #+end_src

*** Open pdfs mit envince
    #+begin_src emacs-lisp 
      (delete '("\\.pdf\\'" . default) org-file-apps)
      (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince \"%s\""))
      (add-to-list 'org-file-apps '("\\.pdf::\\([0-9]+\\)\\'" . "evince \"%s\" -p %1"))
    #+end_src
** Evil
*** Activate Evil
    #+begin_src emacs-lisp 
    (use-package evil
      :config (progn
                (evil-mode 1))
      :init
      (progn
        (define-key evil-insert-state-map "j"
          '(lambda ()
             (interactive)
             (insert "j")
             (let ((event (read-event nil)))
               (if (= event ?j)
                   (progn
                     (backward-delete-char 1)
                     (evil-normal-state))
                 (push event unread-command-events)))))
        (define-key evil-motion-state-map (kbd "C-S-u") 'evil-scroll-up)
        (define-key evil-motion-state-map (kbd "SPC") nil)
        (setq evil-want-C-w-in-emacs-state t
              evilnc-hotkey-comment-operator "##")
        (define-key evil-motion-state-map (kbd "C-S-o") 'evil-execute-in-emacs-state)))
    #+end_src
*** Evil-Leader
    #+begin_src emacs-lisp 
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
    
    (evil-leader/set-key
      "e" 'find-file
      "f" 'find-function
      "b" 'switch-to-buffer
      "h" '(lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([246 32 98 return 246] 0 "%d")) arg))
      "w" 'save-buffer
      "l" 'ace-jump-line-mode
      "ci" 'evilnc-comment-or-uncomment-lines
      "cl" 'evilnc-comment-or-uncomment-to-the-line
      "x" 'smex
      "d" 'ido-dired
      "k" 'kill-buffer)
    
    
    #+end_src
*** Evil match-it
    #+begin_src emacs-lisp 
    (require 'evil-matchit)
    (global-evil-matchit-mode 1)
    #+end_src
** Forth
    #+begin_src emacs-lisp 
    (load (concat user-emacs-directory "custom/gforth.el"))
    (autoload 'forth-mode "gforth.el")
    (setq auto-mode-alist (cons '("\\.fs\\'" . forth-mode) auto-mode-alist))
    ;; need to run run-forth in your forth file buffer
    #+end_src
** Octorgopress
    #+begin_src emacs-lisp 
    (add-to-list 'org-export-backends 'md)
    (load (concat user-emacs-directory "custom/octorgopress/octorgopress.el"))
    #+end_src
** Paredit
*** Key bindings
#+begin_src emacs-lisp 
(use-package paredit
  ;;     :commands paredit-mode
  :init
  (progn
    (global-set-key (kbd "C-M-h") 'paredit-backward)
    (global-set-key (kbd "C-M-l") 'paredit-forward)
    (global-set-key (kbd "C-c h") 'paredit-backward-slurp-sexp)
    (global-set-key (kbd "C-c j") 'paredit-backward-barf-sexp)
    (global-set-key (kbd "C-c k") 'paredit-forward-barf-sexp)
    (global-set-key (kbd "C-c l") 'paredit-forward-slurp-sexp)
    (global-set-key (kbd "C-M-j") 'paredit-splice-sexp-killing-forward)
    (global-set-key (kbd "C-M-k") 'paredit-splice-sexp-killing-backward)
    (global-set-key (kbd "C-c C-s") 'paredit-split-sexp )
    (global-set-key (kbd "C-c C-j") 'paredit-join-sexps)
    (global-set-key (kbd "C-c C-r") 'paredit-raise-sexp)
    (global-set-key (kbd "C-c x") 'paredit-open-curly)
    (global-set-key (kbd "C-M-s-l ") 'paredit-forward-down)
    (global-set-key (kbd "M-l") 'paredit-forward-up)
    (global-set-key (kbd "C-M-s-h ") 'paredit-backward-down)
    (global-set-key (kbd "M-h") 'paredit-backward-up)
    (global-set-key (kbd "C-c (") 'paredit-wrap-round)
    (global-set-key (kbd "C-c {") 'paredit-wrap-curly)
    (global-set-key (kbd "C-c [") 'paredit-wrap-square)
    ))

;; idea: wenn point am ende der zeile ist ad-do-it zweimal machen
(defadvice paredit-forward (around evil-paredit-forward)
  (let ((insert-state (evil-insert-state-p)))
    (if (not insert-state) (evil-insert-state))
    ad-do-it
    ))

(ad-activate 'paredit-forward)
#+end_src
** Gnuplot
    #+begin_src emacs-lisp 
    (require 'gnuplot)
    (global-set-key (kbd "C-M-g") 'org-plot/gnuplot)
    #+end_src
** Org
*** Org-directory
    #+begin_src emacs-lisp 
      (setq org-directory "~/org")
    #+end_src
*** Refiling
    #+begin_src emacs-lisp 
      (defun my/org-refile-within-current-buffer ()
        "Move the entry at point to another heading in the current buffer."
        (interactive)
        (let ((org-refile-targets '((nil :maxlevel . 5))))
          (org-refile)))
      
      (global-set-key (kbd "C-c C-S-w") 'my/org-refile-within-current-buffer)
    #+end_src
*** Keywords
    #+begin_src emacs-lisp 
      (setq org-todo-keywords (quote ((sequence "TOREAD" "READ") (sequence "TODO" "DONE"))))
      (setq org-todo-keyword-faces
            '(
              ("UTODO"  . (:foreground "#b70101" :weight bold :slant italic))
              ("UTOLEARN"  . (:foreground "#b70101" :weight bold :slant italic))
              ("UTOIMPLEMENT"  . (:foreground "#b70101" :weight bold :slant italic))
              ;; ("STARTED"  . (:foreground "#b70101" :weight bold))
              ;; ("APPT"  . (:foreground "sienna" :weight bold))
              ;; ("PROJ"  . (:foreground "blue" :weight bold))
              ;; ("ZKTO"  . (:foreground "orange" :weight bold))
              ;; ("WAITING"  . (:foreground "orange" :weight bold))
              ;; ("DONE"  . (:foreground "forestgreen" :weight bold))
              ;; ("DELEGATED"  . (:foreground "forestgreen" :weight bold))
              ;; ("CANCELED"  . shadow)
              ))
    #+end_src
*** Captures
#+begin_src emacs-lisp 
(use-package org-protocol
             :init (progn
                     (setq org-protocol-default-template-key "l")
                     (setq org-capture-templates
                           '(("t" "Todo" entry (file+olp "~/org/home.org" "Tasks")
                              "* TODO %?")
                             ;; ("w" "TOTWEET" entry (file+olp "~/org/home.org" "Tasks")
                             ;;  "* TOTWEET %?")
                             ;; ("b" "starting with b...")
                             ;; ("bu" "Tobuy" entry (file+olp "~/org/home.org" "Tasks")
                             ;;  "* TOBUY %?")
                             ("l" "TOBLOG" entry (file+olp "~/org/home.org" "Blog")
                              "* TOBLOG %^{Heading}\n\t%?")
                             ;; ("l" "starting with l... ")
                             ("i" "Link" entry (file+olp "~/org/bookmarks.org" "Bookmarks")
                              "* %a\n %?\n %i")
                             ("b" "TOBLOG from Browser" entry (file+olp "~/org/home.org" "Blog")
                              "* TOBLOG %?\n\t%a")
                             ("o" "TOLOOKAT" entry (file+olp "~/org/home.org" "Tasks")
                              "* TOLOOKAT %?")
                             ("u" "TOLOOKAT from Browser" entry (file+olp "~/org/home.org" "Tasks")
                              "* TOLOOKAT %?\n\t%a")
                             ("t" "TODO from Browser" entry (file+olp "~/org/home.org" "Tasks")
                              "* TODO %?\n\t%a")
                             ("p" "Project" entry (file+olp "~/org/projects.org" "Programming")
                              "* %^{Heading}\n\t%?")
                             ("r" "TOREAD" entry (file+olp "~/org/home.org" "Bücher")
                              "* TOREAD %^{Heading}\n\t%?")
                             ("y" "Journal prompted" item (file+datetree+prompt "~/org/journal.org.gpg")
                              "%?")
                             ("j" "Journal" item (file+datetree "~/org/journal.org.gpg")
                              "%?")))
                     (define-key global-map "\C-cc" 'org-capture)))
#+end_src
*** Agenda
#+begin_src emacs-lisp 
(setq org-agenda-files (list "~/org/cal.org" "~/org/bookmarks.org" "~/org/journal.org.gpg" "~/org/projects.org" "~/org/home.org" "~/org/uni.org"))
(setq org-agenda-custom-commands
      '(("u" todo "UTODO|UTOLEARN|UTOIMPLEMENT")
        ("l" todo "TOLOOKAT")
        ("d" todo "TODO")))

(setq org-agenda-skip-deadline-if-done t)
(setq org-agenda-skip-scheduled-if-done t)

;; (defun org-my-auto-exclude-function (tag)
;;   (and (or (string= tag "keys") (string= tag "drill"))
;;        (concat "-" tag)))

(defun org-my-auto-exclude-function (tag)
  (and (string= tag "keys") (concat "-" tag)))

(setq org-agenda-auto-exclude-function 'org-my-auto-exclude-function)
#+end_src
**** Sometimes Agenda doesn't work
    #+begin_src emacs-lisp 
      (setq org-agenda-archives-mode nil)
      (setq org-agenda-skip-comment-trees nil)
      (setq org-agenda-skip-function nil)
    #+end_src
*** Calendar
    #+begin_src emacs-lisp 
    (load-file "~/.emacs.d/custom/org-caldav.el")
    (use-package org-caldav
      :init (progn 
              (setq org-icalendar-exclude-tags (quote ("training" "habit")))
              (setq org-icalendar-include-body nil)
              (setq org-icalendar-use-scheduled (quote nil))
              (define-key evil-normal-state-map (kbd "C-p") 'org-caldav-sync)
              
              (global-set-key (kbd "C-ü")
                              '(lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([134217848 111 114 103 45 99 97 108 100 97 118 45 115 121 110 99 return 111 114 46 114 105 101 103 108 101 114 64 103 109 97 105 108 46 99 111 109 return 119 97 97 114 115 110 118 116 102 120 102 120 121 112 118 106 return] 0 "%d")) arg)))
              (setq org-caldav-calendar-id "lm94as0bqk7f5f6kmluf0k655c@group.calendar.google.com")
              (setq org-icalendar-timezone "Europe/Berlin")
              (setq org-caldav-inbox "~/org/cal.org")
              (setq org-caldav-files (list "~/org/home.org" "~/org/uni.org"))
              (setq org-caldav-sync-changes-to-org 'title-only)
              (setq org-icalendar-include-todo nil)
              (setq org-icalendar-store-UID t)
        
              (global-set-key (kbd "C-c b")
                              '(lambda (&optional arg) "Keyboard macro." (interactive "p") (kmacro-exec-ring-item (quote ([246 32 98 return 246] 0 "%d")) arg)))
              ))
         
    #+end_src
*** General
    #+begin_src emacs-lisp 
    (setq org-refile-targets (quote ((org-agenda-files :maxlevel . 2))))
    (setq org-M-RET-may-split-line nil)
    (setq org-goto-interface 'outline org-goto-max-level 10)
    (add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
    (global-set-key "\C-cL" 'org-store-link)
    (global-set-key "\C-ca" 'org-agenda)

    (global-set-key (kbd "M-o") 'imenu)

    (setq org-log-done 'time)
    (setq org-clock-persist 'history)
    (org-clock-persistence-insinuate)
    (setq org-return-follows-link t)
    #+end_src

*** Export
#+begin_src emacs-lisp 
(setq org-export-with-toc nil)
#+end_src
*** Org-learn
    #+begin_src emacs-lisp 
    (load-file (concat user-emacs-directory "custom/org-mode/contrib/lisp/org-learn.el"))
    (require 'org-learn)
    #+end_src
*** Org-freemind
    # #+begin_src emacs-lisp 
    # (require 'org-freemind)
    # (load-file (concat user-emacs-directory "custom/org-mode/contrib/lisp/ox-freemind.el"))
    # (require 'ox-freemind)
    # #+end_src
*** Org-effectiveness
    #+begin_src emacs-lisp 
    (load-file (concat user-emacs-directory "custom/org-mode/contrib/lisp/org-effectiveness.el"))
    (require 'org-effectiveness)
    #+end_src
*** Org-velocity
    #+begin_src emacs-lisp 
    (load-file (concat user-emacs-directory "custom/org-mode/contrib/lisp/org-velocity.el"))
    (require 'org-velocity)
    #+end_src
*** Org-habit
    #+begin_src emacs-lisp 
    (require 'org-habit)
    #+end_src

*** Org-drill
    #+begin_src emacs-lisp 
    (load-file (concat user-emacs-directory "custom/org-mode/contrib/lisp/org-drill.el"))
    (use-package org-drill
      :init (progn (setq org-drill-learn-fraction 0.45)
                   (setq org-drill-match "-nodrill")))
    #+end_src
*** Org-mobile
    #+begin_src emacs-lisp 
      (setq org-mobile-inbox-for-pull "~/org/notes.org")
      (setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
    #+end_src
*** Org-Babel
    #+begin_src emacs-lisp 
      (setq org-src-fontify-natively t)
      (setq org-confirm-babel-evaluate nil)
      (setq org-src-window-setup 'current-window)
    #+end_src
**** Emacs-lisp
     #+begin_src emacs-lisp 
     (eval-after-load 'org
       '(add-to-list 'org-structure-template-alist
                     '("x" "#+begin_src emacs-lisp \n?\n#+end_src", "<src lang='emacs-lisp'>\n?\n</src>")))
     
     #+end_src
**** R
     #+begin_src emacs-lisp 
     (eval-after-load 'org
       (progn
         '(add-to-list 'org-structure-template-alist
                       '("r"  "#+begin_src R :results silent :session sess1\n?\n#+end_src", "<src lang='R'>\n?\n</src>"))
         '(org-babel-do-load-languages
           'org-babel-load-languages
           '((emacs-lisp . t)
             (R . t)
             (haskell . t)
             (gnuplot . t)
             (C . t)
             (dot . t)))))
     #+end_src
           
    #+begin_src emacs-lisp 
      (require 'ess)
    #+end_src
**** Clojure
     #+begin_src emacs-lisp 
                  (add-to-list 'org-babel-tangle-lang-exts '("clojure" . "clj"))
                  
                  (defvar org-babel-default-header-args:clojure 
                    '((:results . "silent")))
     #+end_src
**** Haskell
     #+begin_src emacs-lisp 
     (load-file "~/.emacs.d/custom/ob-haskell.el")
     (require 'ob-haskell)
     #+end_src
*** Org-attach
    #+begin_src emacs-lisp 
      (require 'org-attach)
      (org-add-link-type "att" 'org-attach-open-link)
      (defun org-attach-open-link (file)
        (org-open-file (org-attach-expand file)))
      (set-variable 'org-attach-store-link-p t)
    #+end_src
*** Org-dotemacs
#+begin_src emacs-lisp 
  (setq org-dotemacs-default-file (concat user-emacs-directory "configuration.org"))
#+end_src
*** Latex
**** Include Bibtex call
#+begin_src emacs-lisp 
  (use-package org-latex
    :init (progn
            (setq org-latex-create-formula-image-program 'dvipng)
            (setq org-latex-pdf-process '("pdflatex -interaction nonstopmode -output-directory %o %f""pdflatex -interaction nonstopmode -output-directory %o %f" "bibtex %b" "pdflatex -interaction nonstopmode -output-directory %o %f"))
            (add-to-list 'org-latex-classes
                         '("termpaper"
                           "\\documentclass{article}
                 [NO-DEFAULT-PACKAGES]
                 [NO-PACKAGES]"
                           ("\\section{%s}" . "\\section*{%s}")
                           ("\\subsection{%s}" . "\\subsection*{%s}")
                           ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                           ("\\paragraph{%s}" . "\\paragraph*{%s}")
                           ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
                         )
            ))
  
#+end_src
**** Beamer
#+begin_src emacs-lisp 
(use-package ox-beamer)
(setq org-beamer-outline-frame-options "")
#+end_src
** Haskell
*** Loading
#+BEGIN_SRC emacs-lisp
       (add-to-list 'load-path (concat user-emacs-directory "custom/haskell-mode"))
       (load "haskell-mode-autoloads.el")
#+END_SRC
*** Settings
    #+begin_src emacs-lisp 
    (setq haskell-hoogle-command nil) 
    ;; (setq haskell-hoogle-command "hoogle")
    ;; (setq haskell-package-conf-file "/home/greg/.ghc/x86_64-linux-7.4.1/package.conf")
    (setq haskell-package-conf-file nil)
    (setq haskell-process-path-cabal-dev "/home/greg/.cabal/bin/cabal")
    (setq haskell-process-path-ghci "ghci")
    (setq haskell-process-suggest-remove-import-lines t)
    (setq haskell-process-suggest-hoogle-imports t)
    (setq haskell-process-auto-import-loaded-modules t)
    (setq haskell-process-prompt-restart-on-cabal-change t)
    (setq haskell-process-suggest-language-pragmas nil)
    (setq haskell-process-type (quote cabal-repl))
    (setq haskell-process-args-ghci '("-package-conf" ".cabal-sandbox/x86_64-linux-ghc-7.8.2-packages.conf.d" "-i../dist/build/autogen" "-idist/build/autogen" "-isrc" "-i../src" "-XOverloadedStrings" "-XBangPatterns"))
    (setq haskell-program-name "cabal repl")
    (setq haskell-stylish-on-save nil)
    (setq haskell-process-log t)
    (setq haskell-tags-on-save nil)
    (setq inferior-haskell-web-docs-base "http://hackage.haskell.org/packages/archive/")
    (setq ghc-core-program-args '("-O0" "-dsuppress-all"))
    #+end_src
*** Hooks
   #+begin_src emacs-lisp 
   
          (eval-after-load "haskell-mode"
            '(progn
              (define-key haskell-mode-map (kbd "C-x C-d") nil)
   (define-key haskell-mode-map (kbd "C-,") 'haskell-move-nested-left)
       (define-key haskell-mode-map (kbd "C-.") 'haskell-move-nested-right)
              (define-key haskell-mode-map "\C-ch" 'haskell-hoogle)
              (define-key haskell-mode-map (kbd "C-c C-z") 'haskell-interactive-switch)
              (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-file)
              (define-key haskell-mode-map (kbd "C-c C-b") 'haskell-interactive-switch)
              (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
              (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
              (define-key haskell-mode-map (kbd "SPC") 'haskell-mode-contextual-space)
              (define-key haskell-mode-map (kbd "C-c M-.") 'haskell-mode-jump-to-def-or-tag)
              (define-key haskell-mode-map (kbd "C-c C-d") nil)))
          (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
          (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
          (add-hook 'haskell-mode-hook 'flymake-haskell-multi-load)
          (defun haskell-hook ()
            (define-key evil-normal-state-map (kbd "M-.") 'haskell-mode-jump-to-def-or-tag)
            (define-key haskell-mode-map (kbd "C-#") 'haskell-interactive-bring)
            )
          (defun haskell-cabal-hook ()
            (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
            (define-key haskell-cabal-mode-map (kbd "C-c c") 'haskell-process-cabal)
            (define-key haskell-cabal-mode-map (kbd "C-#") 'haskell-interactive-bring)
            (define-key haskell-cabal-mode-map [?\C-c ?\C-z] 'haskell-interactive-switch))
          (add-hook 'haskell-cabal-mode-hook 'haskell-cabal-hook)
          (add-hook 'haskell-mode-hook 'haskell-hook)
   #+end_src
*** Aligments
#+BEGIN_SRC emacs-lisp
    (add-to-list 'align-rules-list
                 '(haskell-types
                   (regexp . "\\(\\s-+\\)\\(::\\|∷\\)\\s-+")
                   (modes quote (haskell-mode literate-haskell-mode))))
    (add-to-list 'align-rules-list
                 '(haskell-assignment
                   (regexp . "\\(\\s-+\\)=\\s-+")
                   (modes quote (haskell-mode literate-haskell-mode))))
    (add-to-list 'align-rules-list
                 '(haskell-arrows
                   (regexp . "\\(\\s-+\\)\\(->\\|→\\)\\s-+")
                   (modes quote (haskell-mode literate-haskell-mode))))
    (add-to-list 'align-rules-list
                 '(haskell-left-arrows
                   (regexp . "\\(\\s-+\\)\\(<-\\|←\\)\\s-+")
                   (modes quote (haskell-mode literate-haskell-mode))))
#+END_SRC
*** Imports
#+BEGIN_SRC emacs-lisp
(define-key haskell-mode-map [f8] 'haskell-navigate-imports)
#+END_SRC
*** Flymake
    #+begin_src emacs-lisp 
      (eval-after-load 'flymake '(require 'flymake-cursor))
      (setq flymake-cursor-number-of-errors-to-display nil)
      (setq flymake-gui-warnings-enabled nil)
      (global-set-key (kbd "C-c e") 'flymake-display-err-menu-for-current-line)
      (global-set-key (kbd "C-c C-n") 'flymake-goto-next-error)
      (global-set-key (kbd "C-c C-p") 'flymake-goto-next-error)
    #+end_src
** Projectile
   #+begin_src emacs-lisp 
     (setq projectile-use-native-indexing t)
   #+end_src
** Common Lisp
   #+begin_src emacs-lisp 
     (setq inferior-lisp-program "/usr/bin/clisp")
   #+end_src
